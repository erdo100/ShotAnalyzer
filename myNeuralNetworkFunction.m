function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 18-Jan-2023 16:30:22.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = Qx5 matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = Qx1 matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [2.232742331;1.011031349;0.167942288;1.059077088;4.533920472];
x1_step1.gain = [0.293859089175601;0.486437451238096;0.901715968463649;0.692394397582543;0.0427604102040342];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.7582852150447805251;-1.9718791553051608911;-0.45889767308181489414;-0.98287770464839219198;-0.52762508952602782397;0.49660090645196447445;1.1770329708662303769;-0.25106418019026638389;-2.9181437702332249096;2.5855566419204052409];
IW1_1 = [0.025162370898942854058 -2.6661789657432812817 0.29124397156293385658 2.3330635091014189086 -0.0030109218928907610646;1.5516757100044711315 -0.068971708717184582182 -0.042273439452999495014 1.3494847925245827547 -1.2507822908475023649;0.77952731650779827355 -2.705085301847889756 -0.32398284679723587942 -0.46042594593997338004 -0.89091315678607807538;1.4134103703193761081 0.75963948050406671086 1.8629967335035702014 0.24787013757838785577 -0.46601342262679085193;-0.26072806416307081623 1.1352246040698050766 1.816373989770289743 2.9767355049588810623 -0.50786760912846973248;0.81015653864389070016 -0.10829582542233974485 -0.60054784291913321237 0.51421476935603849245 -0.2200056634265142308;0.97909586589483166286 -0.96546289569891308169 -2.1924389826689547611 -0.86226783649738669713 1.4658689136797777852;2.3073256551984728802 -1.02669270425835224 1.3459427067546068102 -2.7032811779376531014 -0.18279995409247440374;-0.35973946543295148848 1.5596365487416852247 -0.63054006864858402892 0.44270229411766431893 -1.9390448911074129601;0.37921274982307862089 0.011507162612614939279 0.12078815213539334517 -0.35225634869835936724 -4.3641669908468134764];

% Layer 2
b2 = 0.36802825512332532076;
LW2_1 = [0.32913556057192483451 0.028999400284570819863 0.33245410701139888054 0.27794526518802387116 -0.67174984385326741432 0.785622052844546781 -0.62920592580583734055 0.12868951481627496913 0.56989804193841941959 -0.18395197232312188174];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.909440246171942;
y1_step1.xoffset = 0.083098592;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},1); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    X{1,ts} = X{1,ts}';
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
    Y{1,ts} = Y{1,ts}';
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
